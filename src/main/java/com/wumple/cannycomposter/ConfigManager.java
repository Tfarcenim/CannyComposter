package com.wumple.cannycomposter;

import net.minecraft.item.Item;
import net.minecraft.item.Items;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.config.ModConfig;
import net.minecraftforge.registries.ForgeRegistries;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigManager {

    public static final String CATEGORY_GENERAL = "General";

    static ForgeConfigSpec.ConfigValue<List<? extends String>> compostables;
    public static ForgeConfigSpec.ConfigValue<String> compostItem;
    public static ForgeConfigSpec.DoubleValue compostChance;
    public static ForgeConfigSpec.IntValue cookMinTime;
    public static ForgeConfigSpec.IntValue cookMaxTime;
    public static ForgeConfigSpec.BooleanValue cookSteam;

    public ConfigManager(ForgeConfigSpec.Builder builder) {
        builder.comment("General settings").push(CATEGORY_GENERAL);

        compostables = builder.comment("Compostable items and their compost values (0 - 100)").
                defineList("compostables",
                        getDefaults(), String.class::isInstance);

        compostChance = builder.comment("Chance compost works").defineInRange("compostChance", 0.5D, 0.0D, 1.0D);

        compostItem = builder.comment("Compost item generated by composter").define("compostItem",
                "cannycomposter:compost");

        cookMinTime = builder.comment("Composter cooking minimum time").defineInRange("cookMinTime",
                10, 0, Integer.MAX_VALUE);

        cookMaxTime = builder.comment("Composter cooking max time").defineInRange("cookMaxTime",
                20, 0, Integer.MAX_VALUE);

        cookSteam = builder.comment("Does composter cooking make steam").define("cookSteam",
                true);

        builder.pop();
    }

    public static Map<Item,Integer> compost = new HashMap<>();

    private static List<String> getDefaults() {
        int f0 = 30;
        int f1 = 50;
        int f2 = 65;
        int f3 = 85;
        int f4 = 100;

        Map<Item,Integer> defaults = new HashMap<>();

        // Minecraft default compostables
        defaults.put(Items.JUNGLE_LEAVES, f0);
        defaults.put(Items.OAK_LEAVES, f0);
        defaults.put(Items.SPRUCE_LEAVES, f0);
        defaults.put(Items.DARK_OAK_LEAVES, f0);
        defaults.put(Items.ACACIA_LEAVES, f0);
        defaults.put(Items.BIRCH_LEAVES, f0);
        defaults.put(Items.OAK_SAPLING, f0);
        defaults.put(Items.SPRUCE_SAPLING, f0);
        defaults.put(Items.BIRCH_SAPLING, f0);
        defaults.put(Items.JUNGLE_SAPLING, f0);
        defaults.put(Items.ACACIA_SAPLING, f0);
        defaults.put(Items.DARK_OAK_SAPLING, f0);
        defaults.put(Items.BEETROOT_SEEDS, f0);
        defaults.put(Items.DRIED_KELP, f0);
        defaults.put(Items.GRASS, f0);
        defaults.put(Items.KELP, f0);
        defaults.put(Items.MELON_SEEDS, f0);
        defaults.put(Items.PUMPKIN_SEEDS, f0);
        defaults.put(Items.SEAGRASS, f0);
        defaults.put(Items.SWEET_BERRIES, f0);
        defaults.put(Items.WHEAT_SEEDS, f0);
        defaults.put(Items.DRIED_KELP_BLOCK, f1);
        defaults.put(Items.TALL_GRASS, f1);
        defaults.put(Items.CACTUS, f1);
        defaults.put(Items.SUGAR_CANE, f1);
        defaults.put(Items.VINE, f1);
        defaults.put(Items.MELON_SLICE, f1);
        defaults.put(Items.SEA_PICKLE, f2);
        defaults.put(Items.LILY_PAD, f2);
        defaults.put(Items.PUMPKIN, f2);
        defaults.put(Items.CARVED_PUMPKIN, f2);
        defaults.put(Items.MELON, f2);
        defaults.put(Items.APPLE, f2);
        defaults.put(Items.BEETROOT, f2);
        defaults.put(Items.CARROT, f2);
        defaults.put(Items.COCOA_BEANS, f2);
        defaults.put(Items.POTATO, f2);
        defaults.put(Items.WHEAT, f2);
        defaults.put(Items.BROWN_MUSHROOM, f2);
        defaults.put(Items.RED_MUSHROOM, f2);
        defaults.put(Items.MUSHROOM_STEM, f2);
        defaults.put(Items.DANDELION, f2);
        defaults.put(Items.POPPY, f2);
        defaults.put(Items.BLUE_ORCHID, f2);
        defaults.put(Items.ALLIUM, f2);
        defaults.put(Items.AZURE_BLUET, f2);
        defaults.put(Items.RED_TULIP, f2);
        defaults.put(Items.ORANGE_TULIP, f2);
        defaults.put(Items.WHITE_TULIP, f2);
        defaults.put(Items.PINK_TULIP, f2);
        defaults.put(Items.OXEYE_DAISY, f2);
        defaults.put(Items.CORNFLOWER, f2);
        defaults.put(Items.LILY_OF_THE_VALLEY, f2);
        defaults.put(Items.WITHER_ROSE, f2);
        defaults.put(Items.FERN, f2);
        defaults.put(Items.SUNFLOWER, f2);
        defaults.put(Items.LILAC, f2);
        defaults.put(Items.ROSE_BUSH, f2);
        defaults.put(Items.PEONY, f2);
        defaults.put(Items.LARGE_FERN, f2);
        defaults.put(Items.HAY_BLOCK, f3);
        defaults.put(Items.BROWN_MUSHROOM_BLOCK, f3);
        defaults.put(Items.RED_MUSHROOM_BLOCK, f3);
        defaults.put(Items.BREAD, f3);
        defaults.put(Items.BAKED_POTATO, f3);
        defaults.put(Items.COOKIE, f3);
        defaults.put(Items.CAKE, f4);
        defaults.put(Items.PUMPKIN_PIE, f4);

        // additional vanilla MC defaultsables
        defaults.put(Items.ROTTEN_FLESH, f0);
        defaults.put(Items.COOKED_PORKCHOP, f0);
        defaults.put(Items.PORKCHOP, f0);
        defaults.put(Items.GRASS_BLOCK, f0);
        defaults.put(Items.SPONGE, f0);
        defaults.put(Items.WET_SPONGE, f0);
        defaults.put(Items.COBWEB, f0);
        defaults.put(Items.DEAD_BUSH, f0);
        defaults.put(Items.SLIME_BALL, f0);
        defaults.put(Items.SLIME_BLOCK, f0);
        defaults.put(Items.BONE, f0);
        defaults.put(Items.BONE_BLOCK, f0);
        defaults.put(Items.TURTLE_EGG, f0);
        defaults.put(Items.STICK, f0);
        defaults.put(Items.EGG, f0);
        defaults.put(Items.PAPER, f0);
        defaults.put(Items.COD, f0);
        defaults.put(Items.SALMON, f0);
        defaults.put(Items.TROPICAL_FISH, f0);
        defaults.put(Items.PUFFERFISH, f0);
        defaults.put(Items.COOKED_COD, f0);
        defaults.put(Items.COOKED_SALMON, f0);
        defaults.put(Items.INK_SAC, f0);
        defaults.put(Items.SUGAR, f1);
        defaults.put(Items.BEEF, f0);
        defaults.put(Items.COOKED_BEEF, f0);
        defaults.put(Items.CHICKEN, f0);
        defaults.put(Items.COOKED_CHICKEN, f0);
        defaults.put(Items.NETHER_WART, f0);
        defaults.put(Items.SPIDER_EYE, f0);
        defaults.put(Items.FERMENTED_SPIDER_EYE, f0);
        defaults.put(Items.CARROT_ON_A_STICK, f0);
        defaults.put(Items.RABBIT, f0);
        defaults.put(Items.COOKED_RABBIT, f0);
        defaults.put(Items.RABBIT_FOOT, f0);
        defaults.put(Items.COOKED_MUTTON, f0);
        defaults.put(Items.MUTTON, f0);
        defaults.put(Items.RABBIT_STEW, f0);
        defaults.put(Items.MUSHROOM_STEW, f0);
        defaults.put(Items.SUSPICIOUS_STEW, f0);
        defaults.put(Items.CHORUS_FLOWER, f0);
        defaults.put(Items.CHORUS_FRUIT, f0);
        defaults.put(Items.POPPED_CHORUS_FRUIT, f0);
        defaults.put(Items.BEETROOT_SOUP, f0);

        List<String> serailizedDefaults = new ArrayList<>();

        defaults.forEach((item, integer) -> serailizedDefaults.add(item.getRegistryName()+"@"+integer));

        /*
        // MAYBE wooden items
        // MAYBE buckets like milk bucket but give empty bucket back

        // compostable tags - to make support easier for modders
        registerCompostable(c, f0, "#forge:compostables_level1");
        registerCompostable(c, f1, "#forge:compostables_level2");
        registerCompostable(c, f2, "#forge:compostables_level3");
        registerCompostable(c, f3, "#forge:compostables_level4");
        registerCompostable(c, f4, "#forge:compostables_level5");
        // tag "forge:compostables_all" just merges the above tags for reference

        // MAYBE more tags - but evaluation order could cause unintended values
        //    if tag hit before #forge:compostables_level1 for example
        // #forge:bones
        // #forge:crops
        // #forge:eggs
        // #forge:feathers
        // #forge:mushrooms
        // #forge:seeds
        // #forge:slimeballs
        // #forge:string

        // Food Funk
        registerCompostable(c, f0, "foodfunk:rotten_food");
        registerCompostable(c, f0, "rotted_item");
        registerCompostable(c, f0, "biodegradable_item");
        registerCompostable(c, f0, "$food");*/
        return serailizedDefaults;
    }


    private static void loadConfig() {
        ConfigManager.compostables.get().forEach(s -> {
            String[] split = s.split("@");
            Item item = ForgeRegistries.ITEMS.getValue(new ResourceLocation(split[0]));
            int value = Integer.parseInt(split[1]);
            compost.put(item,value);
        });
    }

    public static void onReload(final ModConfig.ModConfigEvent configEvent) {
        if (configEvent.getConfig().getModId().equals(CannyComposter.MOD_ID)) {
            loadConfig();
        }
    }
}
